<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:p="http://www.springframework.org/schema/p"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <http pattern="/resources/**" security="none"/>
    <http pattern="/webjars/**" security="none"/>

    <http pattern="/rest/**" use-expressions="true" name="restSecurityFilterChain" create-session="stateless">
        <http-basic/>
        <intercept-url pattern="/rest/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/**" access="isAuthenticated()"/>
        <csrf disabled="true"/>
    </http>

    <beans:bean class="org.springframework.security.crypto.factory.PasswordEncoderFactories" id="passwordEncoder" factory-method="createDelegatingPasswordEncoder"/>

    <http>
        <intercept-url pattern="/oauth/**" access="isAnonymous()"/>
        <intercept-url pattern="/login" access="isAnonymous()"/>
        <intercept-url pattern="/register" access="isAnonymous()"/>

        <intercept-url pattern="/**/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/**" access="isAuthenticated()"/>

        <form-login login-page="/login" default-target-url="/meals"
                    authentication-failure-url="/login?error=true"
                    login-processing-url="/spring_security_check"/>
        <logout logout-success-url="/login"/>
        <!--<csrf disabled="true"/>-->
    </http>

    <authentication-manager>
        <authentication-provider user-service-ref="userService">
            <password-encoder ref="passwordEncoder"/>
<!--
            <jdbc-user-service data-source-ref="dataSource"
                               users-by-username-query="SELECT email, password, enabled FROM users WHERE email = ?"
                               authorities-by-username-query="
                                                       SELECT u.email, r.role FROM users u, user_roles r WHERE u.id = r.user_id AND u.email = ?"
            />
            <user-service>
                <user name="user@yandex.ru" password="password" authorities="ROLE_USER"/>
                <user name="admin@gmail.com" password="admin" authorities="ROLE_ADMIN"/>
            </user-service>
-->
        </authentication-provider>
    </authentication-manager>

    <beans:bean class="ru.javawebinar.topjava.web.oauth.provider.Oauth2GithubProvider" id="githubOauth2Provider"
                p:clientId="5ef6bbf3012559df545b"
                p:secretId="35321128b121f92bf2cee2166d962358402d2fb7"
                p:authorizeUrl="https://github.com/login/oauth/authorize"
                p:accessTokenUrl="https://github.com/login/oauth/access_token"
                p:redirectUri="http://localhost:8080/topjava/oauth/github/callback"
                p:userDataUrl="https://api.github.com/user"
                p:emailDataUrl="https://api.github.com/user/emails"
                p:scope="read:user user:email"/>

    <beans:bean class="ru.javawebinar.topjava.web.oauth.provider.Oauth2Provider" id="facebookOauth2Provider"
                p:clientId="1747338582230976"
                p:secretId="e392b1f9db8896028fa370da02585a5d"
                p:authorizeUrl="https://www.facebook.com/v3.0/dialog/oauth"
                p:accessTokenUrl="https://graph.facebook.com/v3.0/oauth/access_token"
                p:redirectUri="http://localhost:8080/topjava/oauth/facebook/callback"
                p:userDataUrl="https://graph.facebook.com/me?fields=name,email"
                p:scope="email"/>
</beans:beans>