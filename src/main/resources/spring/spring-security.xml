<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:p="http://www.springframework.org/schema/p"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	         http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <http pattern="/resources/**" security="none"/>
    <http pattern="/webjars/**" security="none"/>

    <http pattern="/rest/**" use-expressions="true" name="restSecurityFilterChain" create-session="stateless">
        <http-basic/>
        <intercept-url pattern="/rest/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/**" access="isAuthenticated()"/>
        <csrf disabled="true"/>
    </http>

    <beans:bean class="org.springframework.security.crypto.factory.PasswordEncoderFactories" id="passwordEncoder" factory-method="createDelegatingPasswordEncoder"/>

    <http>
        <intercept-url pattern="/oauth/**" access="isAnonymous()"/>
        <intercept-url pattern="/login" access="isAnonymous()"/>
        <intercept-url pattern="/register" access="isAnonymous()"/>

        <intercept-url pattern="/**/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/**" access="isAuthenticated()"/>

        <form-login login-page="/login" default-target-url="/meals"
                    authentication-failure-url="/login?error=true"
                    login-processing-url="/spring_security_check"/>
        <logout logout-success-url="/login"/>
        <!--<csrf disabled="true"/>-->
    </http>

    <authentication-manager>
        <authentication-provider user-service-ref="userService">
            <password-encoder ref="passwordEncoder"/>
            <!--
                        <jdbc-user-service data-source-ref="dataSource"
                                           users-by-username-query="SELECT email, password, enabled FROM users WHERE email = ?"
                                           authorities-by-username-query="
                                                                   SELECT u.email, r.role FROM users u, user_roles r WHERE u.id = r.user_id AND u.email = ?"
                        />
                        <user-service>
                            <user name="user@yandex.ru" password="password" authorities="ROLE_USER"/>
                            <user name="admin@gmail.com" password="admin" authorities="ROLE_ADMIN"/>
                        </user-service>
            -->
        </authentication-provider>
    </authentication-manager>

    <beans:bean name="github-properties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
                p:location="classpath:oauth/github.properties"
                p:placeholderPrefix="${github."/>

    <beans:bean name="facebook-properties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
                p:location="classpath:oauth/facebook.properties"
                p:placeholderPrefix="${facebook."/>

    <beans:bean name="google-properties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
                p:location="classpath:oauth/google.properties"
                p:placeholderPrefix="${google."/>

    <beans:bean class="ru.javawebinar.topjava.web.oauth.provider.Oauth2GithubProvider" id="githubOauth2Provider"
                p:clientId="${github.clientId}"
                p:secretId="${github.secretId}"
                p:authorizeUrl="${github.authorizeUrl}"
                p:accessTokenUrl="${github.accessTokenUrl}"
                p:redirectUri="${github.redirectUri}"
                p:userDataUrl="${github.userDataUrl}"
                p:emailDataUrl="${github.emailDataUrl}"
                p:scope="${github.scope}"/>

    <beans:bean class="ru.javawebinar.topjava.web.oauth.provider.Oauth2Provider" id="facebookOauth2Provider"
                p:clientId="${facebook.clientId}"
                p:secretId="${facebook.secretId}"
                p:authorizeUrl="${facebook.authorizeUrl}"
                p:accessTokenUrl="${facebook.accessTokenUrl}"
                p:redirectUri="${facebook.redirectUri}"
                p:userDataUrl="${facebook.userDataUrl}"
                p:scope="${facebook.scope}"/>

    <beans:bean class="ru.javawebinar.topjava.web.oauth.provider.Oauth2Provider" id="googleOauth2Provider"
                p:clientId="${google.clientId}"
                p:secretId="${google.secretId}"
                p:authorizeUrl="${google.authorizeUrl}"
                p:accessTokenUrl="${google.accessTokenUrl}"
                p:redirectUri="${google.redirectUri}"
                p:userDataUrl="${google.userDataUrl}"
                p:scope="${google.scope}"/>
</beans:beans>